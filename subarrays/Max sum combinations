****PROBLEM STATEMENT*****
https://practice.geeksforgeeks.org/problems/maximum-sum-combination/1


*******QUESTION****
Given two integer array A and B of size N each.
A sum combination is made by adding one element from array A and another element of array B.
Return the maximum K valid sum combinations from all the possible sum combinations.

Note : Output array must be sorted in non-increasing order


*****SOLUTION****
  vector<int> maxCombinations(int n, int k, vector<int> &a, vector<int> &b) {
       vector<int> ans;
       sort(a.rbegin(), a.rend());
       sort(b.rbegin(), b.rend());
      set<pair<int,int>>s;
      priority_queue<pair<int,pair<int,int>>>pq;

      s.insert({0,0});
      pq.push({a[0]+b[0],{0,0}});
      
      while(k>0){
        pair<int,pair<int,int>> temp= pq.top();
        pq.pop();
        int sum= temp.first;
        int x= temp.second.first;
        int y = temp.second.second;
        ans.push_back(sum);
        
        if(s.find({x,y+1})==s.end()){
            pq.push({a[x]+b[y+1],{x,y+1}});
            s.insert({x,y+1});
        }
        if(s.find({x+1,y})==s.end()){
            pq.push({a[x+1]+b[y],{x+1,y}});
            s.insert({x+1,y});
        }
      k--;}
       
       return ans;
    }


    TC: O(NlogN)
    SC :O(N)